{"version":3,"sources":["components/Header.js","components/Todos.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Header","props","react_default","a","createElement","className","src","logo","alt","Todos","itemList","items","map","item","key","id","type","text","onSubmit","addItem","name","onChange","handleChange","value","currentItem","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isDeleted","bind","assertThisInitialized","event","preventDefault","target","setState","prevState","Math","floor","random","newItem","concat","toConsumableArray","components_Header","components_Todos","deleteItem","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"kSAaeA,MAVf,SAAgBC,GACf,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACTH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,KAAMF,UAAU,WAAWG,IAAI,YCkB3CC,MAvBf,SAAeR,GACd,IAAMS,EAAWT,EAAMU,MAAMC,IAAI,SAAAC,GAChC,OAAOX,EAAAC,EAAAC,cAAA,MAAIU,IAAKD,EAAKE,IAAIb,EAAAC,EAAAC,cAAA,SAAOY,KAAK,aAAad,EAAAC,EAAAC,cAAA,gBAAQS,EAAKI,SAGhE,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,QAAMc,SAAUjB,EAAMkB,SACrBjB,EAAAC,EAAAC,cAAA,SACAgB,KAAK,OACLJ,KAAK,OACLK,SAAUpB,EAAMqB,aAChBC,MAAOtB,EAAMuB,YAAYP,OAEzBf,EAAAC,EAAAC,cAAA,yBAEDF,EAAAC,EAAAC,cAAA,UACEM,KCkCSe,cA9Cb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXtB,MAAO,GACPa,YAAa,CAAEP,KAAM,GAAIF,GAAI,EAAGmB,WAAW,IAE7CR,EAAKP,QAAUO,EAAKP,QAAQgB,KAAbR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KACfA,EAAKJ,aAAeI,EAAKJ,aAAaa,KAAlBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KAPRA,4EAUDW,GACXA,EAAMC,iBADY,IAEXf,EAASc,EAAME,OAAfhB,MACPM,KAAKW,SAAS,SAAAC,GACZ,MAAO,CAACjB,YAAa,CAACP,KAAMM,EAAOR,GAAI0B,EAAUjB,YAAYT,GAAK2B,KAAKC,MAAsB,IAAhBD,KAAKE,UAAqB,sCAInGP,GACNA,EAAMC,iBACN,IAAMO,EAAUhB,KAAKI,MAAMT,YAC3B,GAAqB,KAAjBqB,EAAQ5B,KAAa,CACvB,IAAMN,EAAK,GAAAmC,OAAAnB,OAAAoB,EAAA,EAAApB,CAAOE,KAAKI,MAAMtB,OAAlB,CAAyBkC,IACpChB,KAAKW,SAAS,CACZ7B,MAAOA,EACPa,YAAa,CAACP,KAAM,GAAIF,GAAI,uCAMhC,OACAb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC4C,EAAD,CAAQzC,KAAMA,MACdL,EAAAC,EAAAC,cAAC6C,EAAD,CACAzB,YAAaK,KAAKI,MAAMT,YACxBb,MAAOkB,KAAKI,MAAMtB,MAClBQ,QAASU,KAAKV,QACdG,aAAcO,KAAKP,aACnB4B,WAAYrB,KAAKqB,qBAxCLC,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.97c949e1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nfunction Header(props) {\r\n\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t        <header className=\"App-header\">\r\n\t          <img src={props.logo} className=\"App-logo\" alt=\"logo\" />\r\n\t        </header>\r\n\t      \t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nfunction Todos(props) {\r\n\tconst itemList = props.items.map(item => {\r\n\t\treturn <li key={item.id}><input type=\"checkbox\" /><span> {item.text}</span></li>\r\n\t});\r\n\r\n\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<form onSubmit={props.addItem}>\r\n\t\t\t\t\t<input \r\n\t\t\t\t\tname=\"text\" \r\n\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\tonChange={props.handleChange}\r\n\t\t\t\t\tvalue={props.currentItem.text}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<button>Submit</button>\r\n\t\t\t\t</form>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t{itemList}\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Todos","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header';\nimport Todos from './components/Todos';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      items: [],\n      currentItem: { text: '', id: 0, isDeleted: false}\n    }\n    this.addItem = this.addItem.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    event.preventDefault();\n    const {value} = event.target;\n    this.setState(prevState => {\n      return {currentItem: {text: value, id: prevState.currentItem.id + Math.floor(Math.random() * 100000) + 1  }}\n    });\n  }\n\n  addItem(event) {\n    event.preventDefault();\n    const newItem = this.state.currentItem;\n    if (newItem.text !== '') {\n      const items = [...this.state.items, newItem];\n      this.setState({\n        items: items,\n        currentItem: {text: '', id: 0}\n      });\n    }\n  }\n  \n  render() {\n    return (\n    <div>\n      <Header logo={logo}/>\n      <Todos \n      currentItem={this.state.currentItem} \n      items={this.state.items} \n      addItem={this.addItem} \n      handleChange={this.handleChange}\n      deleteItem={this.deleteItem}\n      />\n    </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}